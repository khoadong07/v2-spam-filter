const { io } = require("socket.io-client");
const TARGET_URL = "http://0.0.0.0:5001"; // Thay b·∫±ng ƒë·ªãa ch·ªâ server th·ª±c t·∫ø

// T·∫°o d·ªØ li·ªáu test v·ªõi nhi·ªÅu item
const generateTestData = (numItems) => ({
  category: "healthcare_insurance",
  data: Array.from({ length: numItems }, (_, i) => ({
    id: `test_${i}_${Date.now()}`,
    topic: "MCredit",
    topic_id: `123_${i}`,
    title: `Test Title ${i}`,
    content: `Trong b·ªëi c·∫£nh b·ªã m·∫°ng x√£ h·ªôi c·∫°nh tranh gay g·∫Øt, nhi·ªÅu chuy√™n gia cho r·∫±ng b√°o ch√≠ c·∫ßn tr·ªü th√†nh n∆°i ƒë·ªÉ ƒë·ªôc gi·∫£ ki·ªÉm ch·ª©ng th√¥ng tin. N·ªôi dung test ${i}.`,
    description: `Description for test ${i}`,
    sentiment: "Neutral",
    site_name: "Threads - test",
    site_id: `63479744980_${i}`,
    label: "Minigame/livestream",
    type: "fbPageComment",
  })),
});

// H√†m ƒëo th·ªùi gian ph·∫£n h·ªìi
const measureLatency = () => {
  const start = Date.now();
  return () => Date.now() - start;
};

// H√†m test m·ªôt client
const testSingleClient = async (numItems) => {
  return new Promise((resolve, reject) => {
    const socket = io(TARGET_URL, {
      transports: ["websocket"],
      reconnection: false,
      timeout: 60000, // Timeout 60s
    });

    const measure = measureLatency();

    socket.on("connect", () => {
      console.log(`‚úÖ Client connected`);
      socket.emit("predict", generateTestData(numItems));
    });

    socket.on("result", (data) => {
      const latency = measure();
      console.log(`üì• Received result in ${latency}ms`);
      console.dir(data, { depth: null });
      socket.disconnect();
      resolve({ latency, result: data });
    });

    socket.on("connect_error", (err) => {
      console.error(`‚ùå Connection error: ${err.message}`);
      reject(err);
    });

    socket.on("disconnect", () => {
      console.log(`üîå Client disconnected`);
    });
  });
};

// H√†m test nhi·ªÅu client ƒë·ªìng th·ªùi
const testConcurrentClients = async (numClients, numItemsPerClient) => {
  console.log(`üöÄ Testing ${numClients} concurrent clients with ${numItemsPerClient} items each...`);
  const results = [];
  const start = Date.now();

  const promises = Array.from({ length: numClients }, () =>
    testSingleClient(numItemsPerClient)
  );

  try {
    const responses = await Promise.allSettled(promises);
    responses.forEach((response, i) => {
      if (response.status === "fulfilled") {
        results.push({
          client: i + 1,
          latency: response.value.latency,
          success: true,
          result: response.value.result,
        });
      } else {
        results.push({
          client: i + 1,
          latency: null,
          success: false,
          error: response.reason.message,
        });
      }
    });

    const totalTime = Date.now() - start;
    const successCount = results.filter((r) => r.success).length;
    const avgLatency =
      results
        .filter((r) => r.success)
        .reduce((sum, r) => sum + r.latency, 0) / successCount || 0;

    console.log("\nüìä Test Summary:");
    console.log(`Total time: ${totalTime}ms`);
    console.log(`Successful clients: ${successCount}/${numClients}`);
    console.log(`Average latency: ${avgLatency.toFixed(2)}ms`);
    console.log(`Error rate: ${((numClients - successCount) / numClients * 100).toFixed(2)}%`);

    return results;
  } catch (err) {
    console.error(`üî• Test failed: ${err.message}`);
    return [];
  }
};

// Ch·∫°y test
(async () => {
  // Test v·ªõi 10 client, m·ªói client g·ª≠i 5 item
  await testConcurrentClients(100, 5);

  // Test v·ªõi t·∫£i l·ªõn h∆°n: 50 client, m·ªói client g·ª≠i 10 item
  // await testConcurrentClients(50, 10);
})();